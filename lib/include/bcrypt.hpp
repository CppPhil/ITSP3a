#ifndef INCG_ITSP3_BCRYPT_HPP
#define INCG_ITSP3_BCRYPT_HPP
#include "add_user_result.hpp" // itsp3::AddUserResult
#include <array>               // std::array
#include <bcrypt.h> // BCRYPT_HASHSIZE, bcrypt_gensalt, bcrypt_hashpw, bcrypt_checkpw
#include <fstream>     // std::fstream
#include <optional>    // std::optional
#include <string>      // std::string
#include <string_view> // std::string_view

namespace itsp3 {
/*!
 * \brief Type used to write usernames with their passwords to a file in an
 *        encrypted manner. May also be used to check a given password with for
 *        validity for a given username.
 * \note Uses the Bcrypt algorithm as its implementation.
 * \see https://github.com/rg3/bcrypt for details.
 **/
class Bcrypt {
public:
  /*!
   * \brief Creates a Bcrypt object.
   * \param filePath The path to the file to write the usernames
   *                 and passwords to.
   **/
  explicit Bcrypt(std::string filePath);

  /*!
   * \brief Adds a username with a given password to the binary file.
   * \param username The username to use.
   * \param password The password to use.
   * \return An AddUserResult indicating success on success or
   *         an AddUserResult indicating failure on failure.
   * \note Fails if either 'username' or 'password' or too long.
   *       Fails if the user identified by 'username' does exist
   *       in the binary file.
   *       Fails if the file stream could not be opened for writing.
   **/
  AddUserResult addUser(std::string_view username, std::string_view password);

  /*!
   * \brief Checks a given password of a given user for validity.
   * \param username The username entered by the user.
   * \param password The password to check for 'username'.
   * \return true if 'password' is the correct password for the user
   *         'username', otherwise false.
   * \note Fails if the password is incorrect.
   *       Fails if the there was no user with the username 'username'.
   *       Fails if an error occurred in the underlying bcrypt library.
   **/
  bool checkPasswordValidity(
    std::string_view username,
    std::string_view password);

private:
  /*!
   * \brief Determines if the length of a string is OK or not.
   * \param str The string to check the length of.
   * \return true if the length of the string is deemed OK, otherwise false.
   * \note Used in 'addUser' to check if the entered username and password
   *       are of valid length, that is their size does not exceed the
   *       maximum allowable size.
   **/
  static bool isLengthOk(std::string_view str) noexcept;

  static const int s_defaultSaltWorkfactor; /*!< The recommended default
                                             *   salt work factor of the
                                             *   bcrypt library. Allowable
                                             *   values are 4 to 31 (both
                                             *   inclusive).
                                             **/

  /*!
   * \brief Retrieves the hash for a given username from the binary file.
   * \param username The username to retrieve the associated hash of.
   * \return An optional containing a string that holds the (binary) hash
   *         associated with 'username' on success. On failure a nullopt.
   * \note Fails if the binary file could not be opened for reading.
   *       Fails if none of the records in the binary file was the record of
   *       'username'.
   *       May also fail if the binary file was corrupted.
   **/
  std::optional<std::string> findHashOfUser(std::string_view username);

  std::string m_filePath;                   /*!< The path to the binary file */
  std::array<char, BCRYPT_HASHSIZE> m_salt; /*!< Intermediate buffer to write
                                             *   salts generated by the bcrypt
                                             *   library to.
                                             *   Written to from 'addUser'.
                                             **/
  std::array<char, BCRYPT_HASHSIZE> m_hash; /*!< Intermediate buffer to write
                                             *   hashes to.
                                             *   Written to from 'addUser'.
                                             **/
};
} // namespace itsp3
#endif // INCG_ITSP3_BCRYPT_HPP
